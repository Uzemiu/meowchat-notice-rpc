// Code generated by goctl. DO NOT EDIT.
// Source: notice.proto

package noticerpc

import (
	"context"

	"github.com/xh-polaris/meowchat-notice-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Admin              = pb.Admin
	CreateAdminReq     = pb.CreateAdminReq
	CreateAdminResp    = pb.CreateAdminResp
	CreateNewsReq      = pb.CreateNewsReq
	CreateNewsResp     = pb.CreateNewsResp
	CreateNoticeReq    = pb.CreateNoticeReq
	CreateNoticeResp   = pb.CreateNoticeResp
	DeleteAdminReq     = pb.DeleteAdminReq
	DeleteAdminResp    = pb.DeleteAdminResp
	DeleteNewsReq      = pb.DeleteNewsReq
	DeleteNewsResp     = pb.DeleteNewsResp
	DeleteNoticeReq    = pb.DeleteNoticeReq
	DeleteNoticeResp   = pb.DeleteNoticeResp
	ListAdminReq       = pb.ListAdminReq
	ListAdminResp      = pb.ListAdminResp
	ListNewsReq        = pb.ListNewsReq
	ListNewsResp       = pb.ListNewsResp
	ListNoticeReq      = pb.ListNoticeReq
	ListNoticeResp     = pb.ListNoticeResp
	News               = pb.News
	Notice             = pb.Notice
	RetrieveAdminReq   = pb.RetrieveAdminReq
	RetrieveAdminResp  = pb.RetrieveAdminResp
	RetrieveNewsReq    = pb.RetrieveNewsReq
	RetrieveNewsResp   = pb.RetrieveNewsResp
	RetrieveNoticeReq  = pb.RetrieveNoticeReq
	RetrieveNoticeResp = pb.RetrieveNoticeResp
	UpdateAdminReq     = pb.UpdateAdminReq
	UpdateAdminResp    = pb.UpdateAdminResp
	UpdateNewsReq      = pb.UpdateNewsReq
	UpdateNewsResp     = pb.UpdateNewsResp
	UpdateNoticeReq    = pb.UpdateNoticeReq
	UpdateNoticeResp   = pb.UpdateNoticeResp

	NoticeRpc interface {
		RetrieveNotice(ctx context.Context, in *RetrieveNoticeReq, opts ...grpc.CallOption) (*RetrieveNoticeResp, error)
		ListNotice(ctx context.Context, in *ListNoticeReq, opts ...grpc.CallOption) (*ListNoticeResp, error)
		CreateNotice(ctx context.Context, in *CreateNoticeReq, opts ...grpc.CallOption) (*CreateNoticeResp, error)
		UpdateNotice(ctx context.Context, in *UpdateNoticeReq, opts ...grpc.CallOption) (*UpdateNoticeResp, error)
		DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error)
		RetrieveNews(ctx context.Context, in *RetrieveNewsReq, opts ...grpc.CallOption) (*RetrieveNewsResp, error)
		ListNews(ctx context.Context, in *ListNewsReq, opts ...grpc.CallOption) (*ListNewsResp, error)
		CreateNews(ctx context.Context, in *CreateNewsReq, opts ...grpc.CallOption) (*CreateNewsResp, error)
		UpdateNews(ctx context.Context, in *UpdateNewsReq, opts ...grpc.CallOption) (*UpdateNewsResp, error)
		DeleteNews(ctx context.Context, in *DeleteNewsReq, opts ...grpc.CallOption) (*DeleteNewsResp, error)
		RetrieveAdmin(ctx context.Context, in *RetrieveAdminReq, opts ...grpc.CallOption) (*RetrieveAdminResp, error)
		ListAdmin(ctx context.Context, in *ListAdminReq, opts ...grpc.CallOption) (*ListAdminResp, error)
		CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CreateAdminResp, error)
		UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error)
		DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*DeleteAdminResp, error)
	}

	defaultNoticeRpc struct {
		cli zrpc.Client
	}
)

func NewNoticeRpc(cli zrpc.Client) NoticeRpc {
	return &defaultNoticeRpc{
		cli: cli,
	}
}

func (m *defaultNoticeRpc) RetrieveNotice(ctx context.Context, in *RetrieveNoticeReq, opts ...grpc.CallOption) (*RetrieveNoticeResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.RetrieveNotice(ctx, in, opts...)
}

func (m *defaultNoticeRpc) ListNotice(ctx context.Context, in *ListNoticeReq, opts ...grpc.CallOption) (*ListNoticeResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.ListNotice(ctx, in, opts...)
}

func (m *defaultNoticeRpc) CreateNotice(ctx context.Context, in *CreateNoticeReq, opts ...grpc.CallOption) (*CreateNoticeResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.CreateNotice(ctx, in, opts...)
}

func (m *defaultNoticeRpc) UpdateNotice(ctx context.Context, in *UpdateNoticeReq, opts ...grpc.CallOption) (*UpdateNoticeResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.UpdateNotice(ctx, in, opts...)
}

func (m *defaultNoticeRpc) DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.DeleteNotice(ctx, in, opts...)
}

func (m *defaultNoticeRpc) RetrieveNews(ctx context.Context, in *RetrieveNewsReq, opts ...grpc.CallOption) (*RetrieveNewsResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.RetrieveNews(ctx, in, opts...)
}

func (m *defaultNoticeRpc) ListNews(ctx context.Context, in *ListNewsReq, opts ...grpc.CallOption) (*ListNewsResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.ListNews(ctx, in, opts...)
}

func (m *defaultNoticeRpc) CreateNews(ctx context.Context, in *CreateNewsReq, opts ...grpc.CallOption) (*CreateNewsResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.CreateNews(ctx, in, opts...)
}

func (m *defaultNoticeRpc) UpdateNews(ctx context.Context, in *UpdateNewsReq, opts ...grpc.CallOption) (*UpdateNewsResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.UpdateNews(ctx, in, opts...)
}

func (m *defaultNoticeRpc) DeleteNews(ctx context.Context, in *DeleteNewsReq, opts ...grpc.CallOption) (*DeleteNewsResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.DeleteNews(ctx, in, opts...)
}

func (m *defaultNoticeRpc) RetrieveAdmin(ctx context.Context, in *RetrieveAdminReq, opts ...grpc.CallOption) (*RetrieveAdminResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.RetrieveAdmin(ctx, in, opts...)
}

func (m *defaultNoticeRpc) ListAdmin(ctx context.Context, in *ListAdminReq, opts ...grpc.CallOption) (*ListAdminResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.ListAdmin(ctx, in, opts...)
}

func (m *defaultNoticeRpc) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CreateAdminResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.CreateAdmin(ctx, in, opts...)
}

func (m *defaultNoticeRpc) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.UpdateAdmin(ctx, in, opts...)
}

func (m *defaultNoticeRpc) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*DeleteAdminResp, error) {
	client := pb.NewNoticeRpcClient(m.cli.Conn())
	return client.DeleteAdmin(ctx, in, opts...)
}
