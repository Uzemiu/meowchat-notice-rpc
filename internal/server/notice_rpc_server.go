// Code generated by goctl. DO NOT EDIT.
// Source: notice.proto

package server

import (
	"context"

	"github.com/xh-polaris/meowchat-notice-rpc/internal/logic"
	"github.com/xh-polaris/meowchat-notice-rpc/internal/svc"
	"github.com/xh-polaris/meowchat-notice-rpc/pb"
)

type NoticeRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedNoticeRpcServer
}

func NewNoticeRpcServer(svcCtx *svc.ServiceContext) *NoticeRpcServer {
	return &NoticeRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *NoticeRpcServer) RetrieveNotice(ctx context.Context, in *pb.RetrieveNoticeReq) (*pb.RetrieveNoticeResp, error) {
	l := logic.NewRetrieveNoticeLogic(ctx, s.svcCtx)
	return l.RetrieveNotice(in)
}

func (s *NoticeRpcServer) ListNotice(ctx context.Context, in *pb.ListNoticeReq) (*pb.ListNoticeResp, error) {
	l := logic.NewListNoticeLogic(ctx, s.svcCtx)
	return l.ListNotice(in)
}

func (s *NoticeRpcServer) CreateNotice(ctx context.Context, in *pb.CreateNoticeReq) (*pb.CreateNoticeResp, error) {
	l := logic.NewCreateNoticeLogic(ctx, s.svcCtx)
	return l.CreateNotice(in)
}

func (s *NoticeRpcServer) UpdateNotice(ctx context.Context, in *pb.UpdateNoticeReq) (*pb.UpdateNoticeResp, error) {
	l := logic.NewUpdateNoticeLogic(ctx, s.svcCtx)
	return l.UpdateNotice(in)
}

func (s *NoticeRpcServer) DeleteNotice(ctx context.Context, in *pb.DeleteNoticeReq) (*pb.DeleteNoticeResp, error) {
	l := logic.NewDeleteNoticeLogic(ctx, s.svcCtx)
	return l.DeleteNotice(in)
}

func (s *NoticeRpcServer) RetrieveNews(ctx context.Context, in *pb.RetrieveNewsReq) (*pb.RetrieveNewsResp, error) {
	l := logic.NewRetrieveNewsLogic(ctx, s.svcCtx)
	return l.RetrieveNews(in)
}

func (s *NoticeRpcServer) ListNews(ctx context.Context, in *pb.ListNewsReq) (*pb.ListNewsResp, error) {
	l := logic.NewListNewsLogic(ctx, s.svcCtx)
	return l.ListNews(in)
}

func (s *NoticeRpcServer) CreateNews(ctx context.Context, in *pb.CreateNewsReq) (*pb.CreateNewsResp, error) {
	l := logic.NewCreateNewsLogic(ctx, s.svcCtx)
	return l.CreateNews(in)
}

func (s *NoticeRpcServer) UpdateNews(ctx context.Context, in *pb.UpdateNewsReq) (*pb.UpdateNewsResp, error) {
	l := logic.NewUpdateNewsLogic(ctx, s.svcCtx)
	return l.UpdateNews(in)
}

func (s *NoticeRpcServer) DeleteNews(ctx context.Context, in *pb.DeleteNewsReq) (*pb.DeleteNewsResp, error) {
	l := logic.NewDeleteNewsLogic(ctx, s.svcCtx)
	return l.DeleteNews(in)
}

func (s *NoticeRpcServer) RetrieveAdmin(ctx context.Context, in *pb.RetrieveAdminReq) (*pb.RetrieveAdminResp, error) {
	l := logic.NewRetrieveAdminLogic(ctx, s.svcCtx)
	return l.RetrieveAdmin(in)
}

func (s *NoticeRpcServer) ListAdmin(ctx context.Context, in *pb.ListAdminReq) (*pb.ListAdminResp, error) {
	l := logic.NewListAdminLogic(ctx, s.svcCtx)
	return l.ListAdmin(in)
}

func (s *NoticeRpcServer) CreateAdmin(ctx context.Context, in *pb.CreateAdminReq) (*pb.CreateAdminResp, error) {
	l := logic.NewCreateAdminLogic(ctx, s.svcCtx)
	return l.CreateAdmin(in)
}

func (s *NoticeRpcServer) UpdateAdmin(ctx context.Context, in *pb.UpdateAdminReq) (*pb.UpdateAdminResp, error) {
	l := logic.NewUpdateAdminLogic(ctx, s.svcCtx)
	return l.UpdateAdmin(in)
}

func (s *NoticeRpcServer) DeleteAdmin(ctx context.Context, in *pb.DeleteAdminReq) (*pb.DeleteAdminResp, error) {
	l := logic.NewDeleteAdminLogic(ctx, s.svcCtx)
	return l.DeleteAdmin(in)
}
